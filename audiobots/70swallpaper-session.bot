import numpy as np

from sbaudio import audio, scaled_fft, triple
from math import sin, cos

def draw_pyra(r, box_size):
    #stroke(0)
    nostroke()
    strokewidth(0.5)
    nostroke()
    push()
    half_box = box_size / 2
    for a in range(2, half_box, half_box / 8):
        rotate(r / 12.0)
        if a % 4:
            rotate(-r)
            c = sin(20.0 / float(a + 1))
            nostroke()
        else:
            c = sin(-20 / float(a + 12))
            stroke(0,0,0, 0.075)
        fill(c , c * 2.0, 1)
        
        rect(-half_box + a + (sin(r / 100) * 4.0), -half_box + a, box_size - a * 2, box_size - a * 2, roundness=0.5)
    pop()

        
r = 0
        
def draw():
    global NUM_SAMPLES
    global r
    
    spectrogram = scaled_fft(audio.spectrogram, scale=80)
    freqs = len(spectrogram)    
    
    bass, mid, treble = triple(audio.spectrogram)
    
    background(1,1,1)
    r += (sum(bass)/len(bass) * 10.0)
    
    if r > 1:
        r -= (r / 4.0)
    elif r < 1:
        r += (r / 4.0)
    
    # draw grid of boxes
    box_size = int(200 + (sin(float(FRAME) / 30.0) * 20))
    translate(-box_size / 2, -box_size / 2)
    for y in xrange(0, (HEIGHT / box_size) + 2):
        push()
        for x in xrange(0, (WIDTH / box_size) + 2):
            draw_pyra(r, box_size)
            translate(box_size, 0)
        pop()
        translate(0, box_size)
        


        
    
